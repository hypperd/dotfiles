#!/bin/sh

##  Modified by hypper
##  Grimshot: a helper for screenshots within sway
##  Requirements:
##    - `grim`: screenshot utility for wayland
##    - `slurp`: to select an area
##    - `swaymsg`: to read properties of current window
##    - `wl-copy`: clipboard utility
##    - `jq`: json utility to parse swaymsg output
##    - `notify-send`: to show notifications
##  Those are needed to be installed.

if [ -n "$(pgrep slurp)" ]; then
	exit 0
fi

SLURP_CMD="slurp -b 00000064 -c 81a1c1 -s 00000000 -B d8dee926 -w 2"
GRIM_CMD="grim -c -l 1"

if [ "$1" = "--notify" ]; then
	NOTIFY=yes
	shift 1
else
	NOTIFY=no
fi

ACTION=${1:-usage}
SUBJECT=${2:-screen}
FILE=${3:-$(xdg-user-dir SCREENSHOTS)/$(date '+%d-%m-%Y %H%M%S').png}

if [ "$ACTION" != "save" ] && [ "$ACTION" != "copy" ] && [ "$ACTION" != "check" ] && [ "$ACTION" != "copy-save" ]; then
	echo "Usage:"
	echo "  grimshot [--notify] (copy|save|copy-save) [active|screen|output|area|window] [FILE|-]"
	echo "  grimshot check"
	echo "  grimshot usage"
	echo ""
	echo "Commands:"
	echo "  copy: Copy the screenshot data into the clipboard."
	echo "  save: Save the screenshot to a regular file or '-' to pipe to STDOUT."
	echo "  copy-save: Copy the screenshot data into the clipboard and save the screenshot to a regular file."
	echo "  usage: Show this message and exit."
	echo ""
	echo "Targets:"
	echo "  active: Currently active window."
	echo "  screen: All visible outputs."
	echo "  output: Currently active output."
	echo "  area: Manually select a region."
	echo "  window: Manually select a window."
	exit
fi

notify() {
	notify-send -t 3000 -a grimshot "$@"
}

notifyOk() {
	TITLE=${2:-"Screenshot"}
	MESSAGE=${1:-"OK"}

	if [ "$NOTIFY" = "no" ] ; then
		echo "$TITLE: $MESSAGE" 
	else
		notify -i camera "$TITLE" "$MESSAGE"
	fi
}

notifyError() {
	if [ $NOTIFY = "yes" ]; then
		TITLE=${2:-"Screenshot"}
		MESSAGE=${1:-"Error taking screenshot with grim"}
		notify -u critical "$TITLE" "$MESSAGE"
	else
		echo "$1" >&2
	fi
}

die() {
	MSG=${1:-Bye}
	notifyError "Error: $MSG"
	exit 2
}

takeScreenshot() {
	FILE=$1
	GEOM=$2
	OUTPUT=$3
	if [ -n "$OUTPUT" ]; then
		$GRIM_CMD -o "$OUTPUT" "$FILE" || die "Unable to invoke grim"
	elif [ -z "$GEOM" ]; then
		$GRIM_CMD "$FILE" || die "Unable to invoke grim"
	else
		$GRIM_CMD -g "$GEOM" "$FILE" || die "Unable to invoke grim"
	fi
}

case "$SUBJECT" in
"area")
	GEOM=$($SLURP_CMD)
	# Check if user exited slurp without selecting the area
	if [ -z "$GEOM" ]; then
		exit 1
	fi
	WHAT="Area"
	;;
"active")
	FOCUSED=$(swaymsg -t get_tree | jq -r 'recurse(.nodes[]?, .floating_nodes[]?) | select(.focused)')
	GEOM=$(echo "$FOCUSED" | jq -r '.rect | "\(.x),\(.y) \(.width)x\(.height)"')
	APP_ID=$(echo "$FOCUSED" | jq -r '.app_id')
	WHAT="$APP_ID window"
	;;
"screen")
	GEOM=""
	WHAT="Screen"
	;;
"output")
	GEOM=""
	OUTPUT=$(swaymsg -t get_outputs | jq -r '.[] | select(.focused)' | jq -r '.name')
	WHAT="$OUTPUT"
	;;
"window")
	GEOM=$(swaymsg -t get_tree | jq -r '.. | select(.pid? and .visible?) | .rect | "\(.x),\(.y) \(.width)x\(.height)"' | $SLURP_CMD)
	# Check if user exited slurp without selecting the area
	if [ -z "$GEOM" ]; then
		exit 1
	fi
	WHAT="Window"
	;;
*)
	die "Unknown subject to take a screen shot from" "$SUBJECT"
	;;
esac

case "$ACTION" in
"copy")
	takeScreenshot - "$GEOM" "$OUTPUT" | wl-copy --type image/png || die "Clipboard error"
	notifyOk "$WHAT copied to buffer"
	;;
"copy-save")
	if takeScreenshot - "$GEOM" "$OUTPUT" | tee "$FILE" | wl-copy --type image/png; then
		TITLE="Screenshot of $SUBJECT"
		MESSAGE=$(basename "$FILE")
		notifyOk "$MESSAGE" "$TITLE"
	else
		notifyError "Error taking screenshot with grim"
	fi
	;;
"save")
	if takeScreenshot "$FILE" "$GEOM" "$OUTPUT"; then
		TITLE="Screenshot of $SUBJECT"
		MESSAGE=$(basename "$FILE")
		notifyOk "$MESSAGE" "$TITLE"
	else
		notifyError "Error taking screenshot with grim"
	fi
	;;
esac
